* [.] == Follow these in order to setup a basic MEAN Stack on Digital Ocean ==

    * [X] = [[#Dotfiles setup]] =
    
    * [X] = [[#PreSetup]] =

    * [X] = [[#VIM setup]] =
    
    * [ ] = [[#Ubuntu Server Setup ]]=

    * [ ] = [[#NGinx Setup ]]=

    * [ ] = [[#Node Setup ]]=

    * [ ] = [[#PM2]]=

    * [ ] = [[#Multiple Apps ]]=
 
    * [ ] = [[#mongodb setup]] =
    
    * [ ] = [[#server security]] =
    
    * [ ] = [[#daily monitor]] =
    
    * [ ] = [[#robomongo]] =  
 
    * [ ] = [[#node debugger]] =


= [[#basic app framework]] =







== Ubuntu Server Setup ==
* [.] Setup
    * [X] SSH
        - [X] create ssh keys if you dont have:
        * [X] type this in shell:
            - [X] ssh-keygen -t rsa -C "pak11273@gmail.com"
        - [X] add linux distro
        * [X] create key in putty
            - [X] upload public key to server
    * [ ] Add superuser
        - [ ] adduser pak11273
        - [ ] usermod -aG sudo pak11273
        - [ ] copy public key
        - [ ] login as root and su pak11273
        - [ ] mkdir ~/.ssh
        - [ ] chmod 700 ~/.ssh
        - [ ] vim ~/.ssh/authorized_keys
        - [ ] paste public key
        - [ ] exit
    * Disable password authentication (optional)
        * UPDATE: Do not do this step.  It will prevent Putty from using passphrase for your ssh key.  Reference only:
        * allows only ssh keys access to server
        * vim /etc/ssh/sshd_config
        * PasswordAuthentication no
        * systemctl reload sshd
    * [ ] Basic firewall
        - [ ] ufw allow OpenSSH
        - [ ] ufw enable
        - [ ] ufw status

== NGinx Setup ==
* [ ] completed 
    - [ ] apt-get update
    - [ ] apt-get install nginx
    * [ ] I. adjust firewall
        - [ ] ufw allow 'Nginx Full'
        - [ ] ufw status
        - [ ] systemctl status nginx
        - [ ] apt-get install curl
    * [ ] add php and js to file extensions: later
        - [ ] cd /etc/nginx
        - [ ] vim nginx.conf
        - [ ] Add this line:

== Node Setup ==
* [ ] completed 
    - [ ] apt-get update
    - [ ] apt-get install nodejs
    - [ ] apt-get install npm
    - [ ] sudo apt-get install build-essential libssl-dev
    - [ ] curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh -o install_nvm.sh
    - [ ] bash install_nvm.sh 
    - [ ] source ~/.profile
    * [ ] get latest node version
        - [ ] nvm install 6.7.0 ( or latest version ) 
        - [ ] nvm use 6.7.0
        * useful commands:
            * nvm ls //see what version installed
            * node -v  //see what version you are using
            * nvm alias default 6.0.0 //use this version as default

== PM2 ==
* [ ] completed
    - [ ] npm install pm2 -g
    - [ ] pm2 startup ubuntu
    - [ ] copy/paste the line it provides  
        * this sets pm2 to start on boot
    * other pm2 commands:
        * pm2 start <server name>
        * pm2 stop,restart,list,info,monit

== Multiple Apps ==
* [ ] completed
	- [ ] /etc/nginx/sites-available:
        - [ ] Create a file of the appname. 
        - [ ] c/p:
            - change APP_PRIVATE_IP_ADDRESS to 127.0.0.1 or localhost and server_name
            
{{{	
	server {
	
	listen 80;

	server_name example.com;

	location /<appname> {
		proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080;
        	proxy_http_version 1.1;
        	proxy_set_header Upgrade $http_upgrade;
        	proxy_set_header Connection 'upgrade';
        	proxy_set_header Host $host;
        	proxy_cache_bypass $http_upgrade;
    }
}
}}}

* [ ] basic structure of an app
      - [ ] c/p inside the server filename:
          - [ ] This file is usually inside /var/www/dev/<appname> 
          - where private_ip_addr use 127.0.0.1 
    {{{
	var http = require('http');
	http.createServer(function (req, res) {
  		res.writeHead(200, {'Content-Type': 'text/plain'});
  		res.end('Hello World\n');
}).listen(8080, 'APP_PRIVATE_IP_ADDRESS');
	console.log('Server running jat http://APP_PRIVATE_IP_ADDRESS:8080/');
    }}}
    
= VIM setup =
* [X] completed
    - [X] c/p in command line:
          sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
          libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
          libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
          python3-dev ruby-dev lua5.1 lua5.1-dev git
    
    - [X] remove vim: 
          sudo apt-get remove vim vim-runtime gvim
    * [X] cd ~
    * [X] git clone https://github.com/vim/vim.git
    * [X] cd vim
    * [X] apt-get update
    * [X] apt-get install build-essential
    * [X] c/p in command line:
        - [X] 
./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu --enable-python3interp --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr
    - [X] apt-get install make
    - [X] make VIMRUNTIMEDIR=/usr/share/vim/vim80

= Dotfiles setup =
* [X] completed part 1
      - [X] cd ~
      - [X] mkdir dotfiles
      - [X] vim makesymlinks.sh
      - [X] c/p:
{{{
#!/bin/bash
############################
# http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

########## Variables

files="bashrc vimrc vim"    # list of files/folders to symlink in homedir

##########

# create dotfiles_old in homedir
echo "Creating $olddir for backup of any existing dotfiles in ~"
mkdir -p $olddir
echo "...done"

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir
echo "...done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks 
for file in $files; do
    echo "Moving any existing dotfiles from ~ to $olddir"
    mv ~/.$file ~/dotfiles_old/
    echo "Creating symlink to $file in home directory."
    ln -s $dir/$file ~/.$file
done
}}}

    * [X] completed part 2
          - [X] create github repo
          - [X] upload to repo:
          - any changes you make to dotfiles, add them to your makesymlinks.sh file
          - [X] Add plugins:
              - [X] Plugin 'vundle' " vim manager
              - [X] Plugin 'vimwiki/vimwiki' " store your vim note here
              - [X] Plugin 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
              - [X] Plugin 'vim-airline/vim-airline-themes'
              - [X] Plugin 'christoomey/vim-tmux-navigator' " tmux + vim seamless navigation

              - [X] Plugin 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
              - [X] Plugin 'scrooloose/syntastic'
              - [X] " Plugin 'ervandew/supertab' " use <tab> insert completion
              - [X] Plugin 'tpope/vim-surround' " surround code with parens, brackets, quotes, etc
              - [X] Plugin 'tpope/vim-fugitive' " git wrapper for vim
              - [X] Plugin 'tpope/vim-commentary' " comments out code
              - [X] " Plugin 'tobyS/vmustache' | Plug 'tobyS/pdv' " php documente
              - [X] " Plugin 'SirVer/ultisnips' " create snippets ( needs python support )
              - [X] Plugin 'ctrlpvim/ctrlp.vim' " fuzzy file finder
              - [X] Plugin 'MarcWeber/vim-addon-mw-utils' " dependency for vim snips
              - [X] Plugin 'tomtom/tlib_vim' " dependency for vim snips
              - [X] Plugin 'garbas/vim-snipmate' " vim snips 
              - [X] Plugin 'honza/vim-snippets' " vim snips 
              - [X] Plugin 'flazz/vim-colorschemes' " vim colorschemes 

= tmux setup = 

* [ ] completed
    - [ ] start a tmux session
    - [ ] git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    - [ ] tmux source ~/.tmux.conf
    - [ ] prefix + I //installs plugins
 
= mongodb setup = 
* [ ] completed
    * [ ] installation
        - [ ] sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
        - [ ] create a sources list for 16.04
        - [ ] echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse
        - [ ] sudo apt-get update
        - [ ] sudo apt-get install -y mongodb-org
        * [ ] prevent mongodb upgrades run all of the following commands:
            - [ ] echo "mongodb-org hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-server hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-shell hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-tools hold" | sudo dpkg --set-selections
    * [ ] Create a daemon for mongodb
        - [ ] ensure this file is present /lib/systemd/system/mongod.service
    * [ ] Start mongodb
        - [ ] sudo service mongod start 
        - [ ] systemctl status mongod
         
    * [ ] customize mongo shell
        * [ ] custom prompt
        * [ ] start mongo shell
            - [ ] mongo
            - [ ] var prompt = function() { return db+"@"+host+" Uptime:"+db.serverStatus().uptime+" Documents:"+db.stats().objects+" > " ;}
            - [ ] 

 = node debugger =
 
 * [ ] completed
     - [ ] npm install -g vimdebug
     - [ ] put debugger inside listener:
            app.listen(8080, function() {
                debugger;
                });
     - [ ] start script 
            node --debug-brk index.js
     - [ ] start agent
            node-vim-inspector 
     - [ ] inside vim type :nbs 
      **** see node-vim-debugger for commands
 
 
 
 
 
 
 
 
 = basic app framework =
 
* [ ] completed
    - [ ] cd inside of your project root directory
    - [ ] touch index.js
          var express = require('express');
          var bodyParser = require('body-parser');
          var cors = require('cors');
          var mongojs = require('mongojs');
          
          var app = express();
          
          //1. listen for http requests 
          app.listen(<port>, function() {
            console.log('listening on port 9002');
          });
          
          = //2. always parse http body as json, it assigns result to req.body =
          //ALL http methods will be parsed as json
          app.use(bodyParser.json())
          
          //3. abstract away methods into an object
         
          var controller = {
            "index": function(req,res,next) {
                res.send('get page');
                });
                
              app.get('/endpoint', books_controller.index);
          
          //4. basic http post method 
          app.post('/endpoint', function(req,res,next) {
            res.send(req.body);
          });
          
          //5. basic http delete method 
          // incoming url domain.com/endpoint/0
          app.delete('/endpoint', function(req,res,next) {
            array.splice(req,params.id, 1);
            res.send(array:w
            );
          });
          
          
    - [ ] git init
    - [ ] npm init
    - [ ] npm install express --save
    - [ ] vim .gitignore  
        - [ ] node_modules
    - [ ] npm install body-parser --save 
    - [ ] cd root
    - [ ] bower install 
    - [ ] pm2 start index.js -n <app name>
    
= robomongo = 
* [ ] completed
    - [ ] vim /etc/mongod.conf 
    - [ ] comment out bindIp: 127.0.0.1
    - [ ] service mongod restart

= server security =
* [ ] completed
    * [ ] to be reviewed
        * [ ] UFW
            * [ ] allow x11 port forwarding
                - [ ] sudo ufw allow 6000:6063/tcp
                - [ ] sudo ufw allow 6000:6063/udp
    * [ ] Useful audit command:
        * [ ] sudo netstat -plunt
    * [ ] Nginx Setup
        - [ ] vim /etc/nginx/nginx.conf
            * [ ] add this to file:
            limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
            limit_req_status 444;
            map $remote_addr $rt_filtered_ip {
               default $binary_remote_addr;
               # list other ips below
               # ie. 1.2.3.4 ""; //make sure you use "" in 2nd column for every ip
            }
        * [ ] prevent info disclosure
            - [ ] vim /etc/nginx/nginx.conf
                - [ ] uncomment server_tokens off;
                - [ ] sudo service nginx reload
            * [ ] add this to server block of each server:
                * [ ] vim /etc/nginx/sites-available/<server>
                    - [ ] error_page 401 403 404 /404.html;
                    - [ ] sudo service nginx reload
        * [ ] SSL with Let's Encrypt 
            * [ ] reference: https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
            - [ ] ensure you have a domain name and A records to www and @
            - [ ] sudo apt-get update
            - [ ] sudo apt-get install letsencrypt
            - [ ] vim /etc/nginx/sites-available/<server>
                    location ~/.well-known {
                        root /var/www;
                        allow all;
                    }
            - [ ] search for nginx errors:
                    sudo nginx -t 
            - [ ] sudo systemctl restart nginx 
            - [ ] use the following to encrypt a site:
                - sudo letsencrypt certonly -a webroot --webroot-path=/var/www -d example.com -d www.example.com
                * letsencrypt notes:
                    * cert and chains saved at /etc/letsencrypt/live/<domain.com>/fullchain.pem.
                    * expires at a later date, to renew simply run letsencrypt again
                    * account data saved at /etc/letsencrypt which contains certs and private keys, make regular backups of this folder.
            * [ ] generate a strong Diffie-Hellman group:
                - [ ] sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
                    * it will reside in /etc/ssl/certs/dhparam.pem 
            * [ ] Now use your ssl cert
                - [ ] vim /etc/nginx/snippets/ssl-pak11273.com.conf
                - [ ] add these lines, but change "example" to your domain: 
                    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
            * [ ] vim /etc/nginx/snippets/ssl-params.conf 
            * [ ] add the following:
               # from https://cipherli.st/
               # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
               ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
               ssl_prefer_server_ciphers on;
               ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
               ssl_ecdh_curve secp384r1;
               ssl_session_cache shared:SSL:10m;
               ssl_session_tickets off;
               ssl_stapling on;
               ssl_stapling_verify on;
               resolver 8.8.8.8 8.8.4.4 valid=300s;
               resolver_timeout 5s;
               # Disable preloading HSTS for now.  You can use the commented out header line that includes
               # the "preload" directive if you understand the implications.
               #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
               add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
               add_header X-Frame-Options DENY;
               add_header X-Content-Type-Options nosniff;

               ssl_dhparam /etc/ssl/certs/dhparam.pem;

                * to learn more about what this does, read here:
                     https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
            * [ ] Make a backup of your server file:
                - [ ] sudo cp /etc/nginx/sites-available/<server file> 
            * [ ] Modify unencrypted http reqa to redirect to encrypted https 
            * [ ] Add this line to /etc/nginx/sites-available/<server file>:
                server_name example.com www.example.com;
                return 301 https://$server_name$request_uri;
               
               
            * [ ] Add another server block to the above file (replace example.com with your domain): 
                  server {
                    # SSL Config
                    
                    listen 443 ssl http2 default_server;
                    listen [::]:443 ssl http2 default_server;
                    include snippets/ssl-example.com.conf;
                    include snippets/ssl-params.conf;
                  }
                  
            * [ ] Seee this website if you need to include http too:
                * [ ] https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
            * [ ] Adjust ufw now 
                - [ ] Ensure ufw status says "Nginx Full"
                * [ ] test nginx for errors
                    - [ ] sudo nginx -t
                - [ ] sudo systemctl restart nginx
                * [ ] ssl test goto:
                    - [ ]https://www.ssllabs.com/ssltest/analyze.html?d=example.com
                            
            * [ ] Restrict IP
                - [ ] in your server file in the server block, add this line and replace with your ip.  (great for wp sites for /wp-admin directory.  use for admin folders etc:
                    location /<folders>/ {
                        allow <ipaddress>/24;
                        allow <another ipaddress>/24;
                        deny all;
                    }
                - [ ] sudo service nginx reload 
            * [ ] wapiti audit software 
                - [ ] sudo apt-get install wapiti
            * [ ] Create cronjob for letsencrypt
                - [ ] sudo crontab -e
                    - [ ] add these lines:
                        30 2 * * 1 /usr/bin/letsencrypt renew >> /var/log/le-renew.log
                        35 2 * * 1 /bin/systemctl reload nginx
                     
                                      
        * [ ] fail2ban
            - [ ] apt-get install fail2ban
            - [ ] vim /etc/fail2ban/filter.d/nginx-req-limit.conf
                * [ ] add this text:
           # Fail2Ban configuration file
           #
           # supports: ngx_http_limit_req_module module
           
           [Definition]
           
           failregex = limiting requests, excess:.* by zone.*client: <HOST>
           
           # Option: ignoreregex
           # Notes.: regex to ignore. If this regex matches, the line is ignored.
           # Values: TEXT
           #
           ignoreregex =
            * [ ] jail config 
                - [ ] cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
                - [ ] add following:
           [nginx-req-limit]
           
           enabled = true
           filter = nginx-req-limit
           action: iptables-multiport[name=ReqLimit, port="http,https", protocol=tcp]
           logpath = /var/log/nginx/*error.log
       findtime = 600
       bantime = -1
       maxretry = 10
                - [ ] service fail2ban restart 
            * [ ] Permanent ban config
                * [ ] ref: https://zach.seifts.us/posts/2013/07/14/how-make-fail2ban-bans-persistent
                    * [ ] You can make the bans persistent by setting up a blacklist and automatically loading them when fail2ban is restarted. First, you need to create a file to store blacklisted IPs.
                        - [ ] sudo touch /etc/fail2ban/ip.blacklist
                        - [ ] Then you can either make a copy or edit the /etc/fail2ban/action.d/iptables-multiport.conf file. I prefer to make a copy of it because I version all of my configs.
                    * [ ] In the action config file you have a few different directives, we want to focus on 2, the actionstart and actionban. First, when fail2ban bans an IP we want to not only ban it, but we want to add the IP address to the ip.blacklist file:
                            actionban = iptables -I fail2ban-<name> 1 -s <ip> -j DROP
                                 echo <ip> >> /etc/fail2ban/ip.blacklist
                    * [ ] Then we want to be sure that the iptables rule is added when fail2ban is started, so we add the following lines of code to the actionstart directive:
                          actionstart = iptables -N fail2ban-<name>
                                        iptables -A fail2ban-<name> -j RETURN
                                        iptables -I INPUT -p <protocol> -m multiport --dports <port> -j fail2ban-<name>
                                        cat /etc/fail2ban/ip.blacklist | while read IP; do iptables -I fail2ban-<name> 1 -s $IP -j DROP; done
                      * That's it, once you restart fail2ban it will automatically ban all of the IPs in your ip.blacklist file.
                   

       
   
== daily monitor == 
* [ ] Check logs for suspicious activity
    - [ ] tail -f /var/www/dev/pak11273/logs/*.log | egrep "login|444"
        * if you site is under attack you will seee something like this:
        * 2013/08/23 04:17:03 [error] 256554#0: *99927 limiting requests, excess: 1.852 by zone "one", client: 1.2.3.4, server: example.com, request: "GET /wp-login.php HTTP/1.0", host: "exmaple.com"
* [ ] use this to simulate an attack:
        - ab -n 100 -c 10 107.170.216.170/index.js
        * later: this makes requests, but doesn't produce errors
* [ ] see what ips are snooping ssh
    - [ ] tail -f /var/log/fail2ban.log
        * [ ] look for lines that ban ip
* [ ] see jailed ips
    - [ ] fail2ban-client status nginx-req-limit 
* [ ] wapiti scan
    - [ ] wapiti http://example.org -n 10 -b folder
    - [ ] use bash to scp file to local and read it
    - [ ] check this output every month to make sure letsencrypt is renewing: /var/log/le-renew.log
* [ ] Check tcp traffic
    - [ ] tcptrack -i eth0
* [ ] Check banned ips at /etc/fail2ban/ip.blacklist
    * [ ] Ban an IP
        - [ ] sudo /sbin/iptables -A INPUT -s <ipp addr> -j DROP
    * [ ] View a banned IP
        - [ ] sudo iptables -L INPUT -v -n | grep "<ip addr>"
    * [ ] Unban an IP
        - [ ] sudo iptables -D INPUT -s <ip addr> -j DROP
 
= PreSetup = 

* [ ] Initial security
    * [ ] Install tcptrack
    * [ ] ufw
        * [ ] ufw enable
    * [ ] Iptables
        * [ ] Iptables basic commands
            * [ ] iptables -L | grep policy
                * [ ] show current default rules 
            * [ ] drop all connections from a speicific ip
                * [ ] iptables -A INPUT -s 1.1.1.1 -j DROP
            * [ ] drop all connenctions from a range of ip
                * [ ] iptables -A INPUT -s 1.1.1.1/24 -j DROP
            * [ ] block ssh from a specific ip
                * [ ] iptables -A INPUT -p tcp --dport ssh 1.1.1.1 -j DROP
                * [ ] you carn replace ssh with any protocol or port number
            * [ ] saving iptables rules ubuntu
                * [ ] /sbin/iptables-save
            * [ ] List current iptables rules
                * [ ] iptables -L
            * [ ] Clear iptables rules
                * [ ] iptables -F
     
 
 
 

