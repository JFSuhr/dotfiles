* [O] == Follow these in order to setup a basic MEAN Stack on Digital Ocean ==

    * [X] = [[#Dotfiles setup]] =
    
    * [X] = [[#PreSetup]] =

    * [X] = [[#VIM setup]] =
    
    * [X] = [[#Ubuntu Server Setup ]]=
    
    * [X] = [[#server security]] =

    * [X] = [[#NGinx Setup ]]=
    
    * [X] = [[#nginx security]] = 

    * [X] = [[#Node Setup ]]=

    * [X] = [[#PM2]]=

    * [ ] = [[#Multiple Apps ]]=
 
    * [ ] = [[#mongodb setup]] =
    
    * [ ] = [[#postgreSQL setup]] =
    
* [ ] = [[#daily monitor]] =
    
    * [ ] = [[#robomongo]] =  
 
    * [ ] = [[#node debugger]] =


= [[#basic app framework]] =







== Ubuntu Server Setup ==
* [.] Setup
    * [X] SSH
        - [X] create ssh keys if you dont have:
        * [X] type this in shell:
            - [X] ssh-keygen -t rsa -C "pak11273@gmail.com"
        - [X] add linux distro
        * [X] create key in putty
            - [X] upload public key to server
    * [ ] Add superuser
        - [ ] adduser pak11273
        - [ ] usermod -aG sudo pak11273
        - [ ] copy public key
        - [ ] login as root and su pak11273
        - [ ] mkdir ~/.ssh
        - [ ] chmod 700 ~/.ssh
        - [ ] vim ~/.ssh/authorized_keys
        - [ ] paste public key
        - [ ] exit
    * Disable password authentication (optional)
        * UPDATE: Do not do this step.  It will prevent Putty from using passphrase for your ssh key.  Reference only:
        * allows only ssh keys access to server
        * vim /etc/ssh/sshd_config
        * PasswordAuthentication no
        * systemctl reload sshd
* [ ] Timezone setup
        - [ ] sudo dpkg-reconfigure tzdata
* [ ] Bower fix
        - [ ] ln -s /usr/bin/nodejs /usr/bin/node
    
* [ ] X11 setup
    * [ ] todo

== NGinx Setup ==
* [O] completed 
    - [X] apt-get update
    - [X] apt-get install nginx
    - [X] apt-get install curl
    * [o] add php and js to file extensions: later
        - [X] cd /etc/nginx
        - [X] vim nginx.conf
        - [X] Add this line:
        
      
== nginx security ==
* [.] Add nginx security
    * [.] ref: https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04
        * [.] add sendmail
            - [X] sudo apt-get install sendmail 
            - [ ] vim /etc/hosts
                * [ ] change line 127.0.0.1 localhost to:
                    - [ ] 127.0.0.1 localhost.localdomain localhost <hostname> 
    * [ ] change bantime to half an hour
        - [ ] sudo vim /etc/fail2ban/jail.local:
              [Default] 
              bantime = -1;
              destemail = youremail
              sender = fail2ban@localhost
              action = %(action_mwl)s
              [nginx-http-auth]
              enabled = true
              filter = nginx-http-auth
        - [ ] restart fail2ban              
              sudo service fail2ban restart
* [ ] More fail2ban for nginx
      * [ ] ref: https://www.digitalocean.com/community/tutorials/how-to-protect-an-nginx-server-with-fail2ban-on-ubuntu-14-04
      * [ ] Custom Jails
      * [ ] vim /etc/fail2ban/jail.local
          - [ ] badbots
                [nginx-badbots]
                enabled  = true
                port     = http,https
                filter   = nginx-badbots
                logpath  = /var/log/nginx/access.log
                maxretry = 2
          - [ ] nohome 
                [nginx-nohome]
                enabled  = true
                port     = http,https
                filter   = nginx-nohome
                logpath  = /var/log/nginx/access.log
                mxaxretry = 2
          - [ ] noproxy 
                [nginx-noproxy]
                enabled  = true
                port     = http,https
                filter   = nginx-noproxy
                logpath  = /var/log/nginx/access.log
                mxaxretry = 2
      * [ ] Custom Filters
          * [ ] no username or password supplied
          - [ ] vim /etc/fail2ban/filter.d/nginx-http-auth.conf:
                - [ ] repace current filter with this one:
                failregex = ^ \[error\] \d+#\d+: \*\d+ user "\S+":? (password mismatch|was not found in ".*"), client: <HOST>, server: \S+, request: "\S+ \S+ HTTP/\d+\.\d+", host: "\S+"\s*$
                            ^ \[error\] \d+#\d+: \*\d+ no user/password was provided for basic authentication, client: <HOST>, server: \S+, request: "\S+ \S+ HTTP/\d+\.\d+", host: "\S+"\s*$
          * [ ] badbots filter
              * [ ] just copying default, no editing necessary
                  - [ ] sudo cp apache-badbots.conf nginx-badbots.conf 
          * [ ] nohome filter
              - [ ] vim /etc/fail2ban/filter.d/nginx-nohome.conf:
                    [Definition]

                    failregex = ^<HOST> -.*GET .*/~.*

                    ignoreregex =
              
          * [ ] noproxy filter
              - [ ] vim /etc/fail2ban/filter.d/nginx-noproxy.conf
                    [Definition]
                    
                    failregex = ^<HOST> -.*GET http.*
                    
                    ignoreregex =
          - [ ] sudo service fail2ban restart 
* [ ] SSL config with letsencrypt
    * [ ] ref: https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04 
    - [ ] sudo apt-get udpate
    - [ ] sudo apt-get install letsencrypt 
    - [ ] vim /etc/nginx/sites-available/<server name>:
          server {
               listen 80;
               root /var/www/html;
               index index.html index.htm;
               
               server_name pak11273.com;

               location ~ /.well-known {
                   allow all;
               }
                    
               location / {
               }
        
           }
         
    - [ ] remove default from sites-enabled
    - [ ] add index.html to /var/www/html
    - [ ] add robots.txt to /var/www/html:
          User-agent: *
          Disallow: /
    - [ ] sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d example.com -d www.example.com 
    * [ ] Locate where your certificate is
        - [ ] sudo ls -l /etc/letsencrypt/live/your_domain_name
    - [ ] sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    - [ ] sudo vim /etc/nginx/snippets/ssl-example.com.conf 
            ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    - [ ] sudo vim /etc/nginx/snippets/ssl-params.conf
           # from https://cipherli.st/
           # # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
           ssl_prefer_server_ciphers on;
           ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
           ssl_ecdh_curve secp384r1;
           ssl_session_cache shared:SSL:10m;
           ssl_session_tickets off;
           ssl_stapling on;
           ssl_stapling_verify on;
           resolver 8.8.8.8 8.8.4.4 valid=300s;
           resolver_timeout 5s;
           # Disable preloading HSTS for now.  You can use the commented out header line that includes
           # the "preload" directive if you understand the implications.
           #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
           add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
           add_header X-Frame-Options DENY;
           add_header X-Content-Type-Options nosniff;
           ssl_dhparam /etc/ssl/certs/dhparam.pem;
    - [ ] add this to /etc/nginx/sites-available/<server file>
                     return 301 https://$server_name$request_uri;
               }
               
               server {
               
                   # SSL configuration
                     listen 443 ssl http2 default_server;
                     listen [::]:443 ssl http2 default_server;
                     include snippets/ssl-example.com.conf;
                     include snippets/ssl-params.conf;
                     
                     root /var/www/html;
                     
                     location /<app> {
                        ...
                     }
               }
               
    - [ ] Make ssl auto renewal 
    - [ ] sudo letsencrypt renew
        - [ ] sudo crontab -e
            - [ ] add these lines:
                30 2 * * 1 /usr/bin/letsencrypt renew >> /var/log/le-renew.log
                35 2 * * 1 /bin/systemctl reload nginx
                 


== Node Setup ==
    * [X] completed 
        - [X] apt-get update
        - [X] apt-get install nodejs
        - [X] apt-get install npm
        - [X] sudo apt-get install build-essential libssl-dev
        - [X] curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh -o install_nvm.sh
        - [X] bash install_nvm.sh 
        - [X] source ~/.profile
        * [X] get latest node version
            - [X] nvm install 6.7.0 ( or latest version ) 
            - [X] nvm use 6.7.0
            * useful commands:
                * nvm ls //see what version installed
                * node -v  //see what version you are using
                * nvm alias default 6.0.0 //use this version as default

    == PM2 ==
    * [X] completed
        - [X] npm install pm2 -g
        - [X] pm2 startup ubuntu
        - [X] copy/paste the line it provides  
            * this sets pm2 to start on boot
        * other pm2 commands:
            * pm2 start <server name>
            * pm2 stop,restart,list,info,monit

    == Multiple Apps ==
    * [ ] completed
        - [ ] /etc/nginx/sites-available:
            - [ ] Create a file of the appname. 
            - [ ] c/p:
                - change APP_PRIVATE_IP_ADDRESS to 127.0.0.1 or localhost and server_name
                
    {{{	
        server {
	
	listen 80;

	server_name example.com;

	location /<appname> {
		proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080;
        	proxy_http_version 1.1;
        	proxy_set_header Upgrade $http_upgrade;
        	proxy_set_header Connection 'upgrade';
        	proxy_set_header Host $host;
        	proxy_cache_bypass $http_upgrade;
    }
}
}}}

* [ ] basic structure of an app
      - [ ] c/p inside the server filename:
          - [ ] This file is usually inside /var/www/dev/<appname> 
          - where private_ip_addr use 127.0.0.1 
    {{{
	var http = require('http');
	http.createServer(function (req, res) {
  		res.writeHead(200, {'Content-Type': 'text/plain'});
  		res.end('Hello World\n');
}).listen(8080, 'APP_PRIVATE_IP_ADDRESS');
	console.log('Server running jat http://APP_PRIVATE_IP_ADDRESS:8080/');
    }}}
    
= VIM setup =
* [ ] completed
    * [ ] ref:  https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source
    * [ ] follow instructions per guidelines
    * [ ] Since vim is now 8.0 you will need to symlink the path from vim74 to vim80
        - [ ] ln -sv /usr/share/vim/vim80 /usr/share/vim/vim74

= Dotfiles setup =
* [X] completed part 1
      - [X] cd ~
      - [X] mkdir dotfiles
      - [X] vim makesymlinks.sh
      - [X] c/p:
{{{
#!/bin/bash
############################
# http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

########## Variables

files="bashrc vimrc vim"    # list of files/folders to symlink in homedir

##########

# create dotfiles_old in homedir
echo "Creating $olddir for backup of any existing dotfiles in ~"
mkdir -p $olddir
echo "...done"

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir
echo "...done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks 
for file in $files; do
    echo "Moving any existing dotfiles from ~ to $olddir"
    mv ~/.$file ~/dotfiles_old/
    echo "Creating symlink to $file in home directory."
    ln -s $dir/$file ~/.$file
done
}}}

    * [X] completed part 2
          - [X] create github repo
          - [X] upload to repo:
          - any changes you make to dotfiles, add them to your makesymlinks.sh file
          - [X] Add plugins:
              - [X] Plugin 'vundle' " vim manager
              - [X] Plugin 'vimwiki/vimwiki' " store your vim note here
              - [X] Plugin 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
              - [X] Plugin 'vim-airline/vim-airline-themes'
              - [X] Plugin 'christoomey/vim-tmux-navigator' " tmux + vim seamless navigation

              - [X] Plugin 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
              - [X] Plugin 'scrooloose/syntastic'
              - [X] " Plugin 'ervandew/supertab' " use <tab> insert completion
              - [X] Plugin 'tpope/vim-surround' " surround code with parens, brackets, quotes, etc
              - [X] Plugin 'tpope/vim-fugitive' " git wrapper for vim
              - [X] Plugin 'tpope/vim-commentary' " comments out code
              - [X] " Plugin 'tobyS/vmustache' | Plug 'tobyS/pdv' " php documente
              - [X] " Plugin 'SirVer/ultisnips' " create snippets ( needs python support )
              - [X] Plugin 'ctrlpvim/ctrlp.vim' " fuzzy file finder
              - [X] Plugin 'MarcWeber/vim-addon-mw-utils' " dependency for vim snips
              - [X] Plugin 'tomtom/tlib_vim' " dependency for vim snips
              - [X] Plugin 'garbas/vim-snipmate' " vim snips 
              - [X] Plugin 'honza/vim-snippets' " vim snips 
              - [X] Plugin 'flazz/vim-colorschemes' " vim colorschemes 

= tmux setup = 

* [ ] completed
    - [ ] start a tmux session
    - [ ] git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    - [ ] tmux source ~/.tmux.conf
    - [ ] prefix + I //installs plugins
 
= mongodb setup = 
* [.] completed
    * [O] installation
        - [X] sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
        * [o] create a sources list for 16.04
            - [X] echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse
                * the above doesn't work!
        - [X] sudo apt-get update
        - [X] sudo apt-get install -y mongodb-org
        * [ ] prevent mongodb upgrades run all of the following commands:
            - [ ] echo "mongodb-org hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-server hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-shell hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-tools hold" | sudo dpkg --set-selections
    * [ ] Create a daemon for mongodb
        - [ ] ensure this file is present /lib/systemd/system/mongod.service
    * [ ] Start mongodb
        - [ ] sudo service mongod start 
        - [ ] systemctl status mongod
         
    * [ ] customize mongo shell
        * [ ] custom prompt
        * [ ] start mongo shell
            - [ ] mongo
            - [ ] var prompt = function() { return db+"@"+host+" Uptime:"+db.serverStatus().uptime+" Documents:"+db.stats().objects+" > " ;}
            - [ ] 

= postgreSQL setup =
* [ ] completed
    * [ ] Install postgres server
        - [ ] sudo apt-get install postgresql postgresql-contrib 
        - [ ] sudo apt-get install pgadmin3
        - [ ] sudo apt-get install postgresql-contrib
        - [ ] sudo -u postgres psql
        - [ ] CREATE EXTENSION adminpack;
    * [ ] Set user postgres
        - [ ] sudo -u postgres psql postgres 
    * [ ] change pw
        - [ ] \password 
    * [ ] exit postgres
        - [ ] Ctrl-D or \q
    * [ ] Create database
        - [ ] sudo - u postgres psql 
        - [ ] sudo -u postgres createdb mydb
                        or 
        - [ ] create database <databasename>; 
    * [ ] Open security
        - [ ] sudo iptables -D INPUT -j DROP
        - [ ] sudo iptables -A INPUT -p tcp --dport 5432 -j ACCEPT
        - [ ] sudo iptables -A INPUT -j DROP
        - [ ] sudo netfilter-persistent save
        - [ ] sudo netfilter-persistent reload 
        - [ ] sudo service ufw restart
    * [ ] Allow remote access
        * [ ] Make backup of all conf files you change
            * [ ] sudo vim /etc/postgresql/<version>/main/postgresql.conf:
                - [ ] listen_addresses = '*'
            * [ ] sudo vim /etc/postgresql/<version>/main/pg_hba.conf:
                - [ ] host all all 0.0.0.0/0 md5
            - [ ] sudo /etc/init.d/postgresql stop
            - [ ] sudo /etc/init.d/postgresql start
 
= node debugger =
 
 * [ ] completed
     - [ ] npm install -g vimdebug
     - [ ] put debugger inside listener:
            app.listen(8080, function() {
                debugger;
                });
     - [ ] start script 
            node --debug-brk index.js
     - [ ] start agent
            node-vim-inspector 
     - [ ] inside vim type :nbs 
      **** see node-vim-debugger for commands
 
 
 
 
 
 
 
 
 = basic app framework =
 
* [ ] completed
    * [ ] directory and file structure:
        - [ ] main directory
            package.json (this is made with npm init)
            - [ ] public
                index.html
                - [ ] assets 
                    - [ ] img
                    - [ ] styles
                - [ ] app
                    app.module.js
                    app.routes.js
                    - [ ] home component
                        ie. homeTemplate, homeCtrl, homeService, homeDashboard, homeLogin
                    - [ ] shared
                        ie. navbar, directives, footer
            - [ ] server
                schema.sql 
                index.js
                - [ ] controllers
                - [ ] db
            
    - [ ] cd inside of your project root directory
    - [ ] npm init
    - [ ] npm i express body-parser cors mongojs --save (or massive instead of mongojs)
    - [ ] touch index.js:
          var express = require('express');
          var bodyParser = require('body-parser');
          var cors = require('cors');
          var mongojs = require('mongojs');
          
          var app = express();
          
          //1. listen for http requests 
          app.listen(<port>, function() {
            console.log('listening on port 9002');
          });
          
          = //2. always parse http body as json, it assigns result to req.body =
          //ALL http methods will be parsed as json
          app.use(bodyParser.json())
          
          //3. abstract away methods into an object
         
          var controller = {
            "index": function(req,res,next) {
                res.send('get page');
             }
          };
                
              app.get('/endpoint', books_controller.index);
          
          //4. basic http post method 
          app.post('/endpoint', function(req,res,next) {
            res.send(req.body);
          });
          
          //5. basic http delete method 
          // incoming url domain.com/endpoint/0
          app.delete('/endpoint', function(req,res,next) {
            array.splice(req,params.id, 1);
            res.send(array:w
            );
          });
          
          
    - [ ] git init
    - [ ] vim .gitignore  
        - [ ] node_modules
    - [ ] cd root
    - [ ] sudo bower init --allow-root 
    - [ ] pm2 start index.js -n <app name>
    * [ ] Change nginx config:
          location / {
                  proxy_pass http://localhost:{YOUR_PORT};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                                                          proxy_cache_bypass $http_upgrade;
                                                                      }
          - [ ] Add port access:
              sudo iptables -D INPUT -j DROP
              sudo iptables -A INPUT -p tcp --dport <port #> -j ACCEPT 
              sudo iptables -A INPUT -j DROP
              /sbin/iptables-save
              











= robomongo = 
* [ ] completed
    - [ ] vim /etc/mongod.conf 
    - [ ] comment out bindIp: 127.0.0.1
    - [ ] service mongod restart

= server security =
* [ ] completed
* [ ] Create a new user
    - [ ] adduser <new user>
    - [ ] gpasswd -a <new user> sudo
    - [ ] su <new user>
    - [ ] cd ~
    - [ ] mkdir .ssh
        - [ ] chmod 700 .ssh
    - [ ] vim .ssh/authorized_keys
        - [ ] place [[#Public ssh key ]]here
    - [ ] chmod 600 .ssh/authorized_keys
    = Public ssh key =
    - [ ] Open up gitbash
        - [ ] ssh-keygen
            - [ ] ssh-copy-id <user>@<server ip>
                * this will be addeds to .ssh/authorized_keys file
* [ ] Remove root login
    - [ ] cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
    - [ ] chmod a-w /etc/ssh/sshd_config.bak
    - [ ] vim /etc/ssh/sshd_config 
        - [ ] Change PermitRootLogin to no 
        - [ ] service ssh restart 
    * [ ] IMPORTANT - Before logging out of root, open another terminal and ensure that you can ssh with new user!!!!!!
* [ ] Disable password authentication
    - [ ] vim /etc/ssh/sshd_config 
    - [ ] uncomment and changes PasswordAuthentication to no
    - [ ] service ssh restart
    * Now you can download dotfiles to newuser

    * [ ] Iptables security setup 
        - [ ] ref: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-iptables-on-ubuntu-14-04
        - [ ] If you mess up you can restart iptables:
              sudo iptables -P INPUT ACCEPT
              sudo iptables -P OUTPUT ACCEPT
              sudo iptables -F
        * [ ] Match packets that are part of an existing connection and connections that are established:
            - [ ] sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
        - [ ] Open up ports 22 and 80:
              sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
              sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        - [ ] Allow server computer to talk to itself:
              sudo iptables -I INPUT 1 -i lo -j ACCEPT
        - [ ] 2 options (pick the latter) for dropping any packets that don't follow our rules:      
            - [ ] Option 1: Change default to not accept any packets if it doesn't meet our rules:
              sudo iptables -P INPUT DROP 
              * if you reset server, then you won't have access. but through console.
            - [ ] Option 2: 
              sudo iptables -P INPUT ACCEPT
              suod iptables -A INPUT -j DROP
        * [ ] Adding new rules:
            * [ ] When adding new rules follow this template:
              sudo iptables -D INPUT -j DROP
              sudo iptables -A INPUT new_rule_here
              sudo iptables -A INPUT -j DROP
              
              * [ ] or insert the new rule by line-number right before the last rule:
              ie. sudo iptables -I INPUT  line_number new_rule
        * [ ] Making your rules persist 
            - [ ] sudo apt-get update
            - [ ] sudo apt-get install iptables-persistent
        * [ ] After implementing new rules use this line to keep the rule persisting:
            * [ ] 14.04 
                sudo /etc/init.d/iptables-persistent save 
                sudo /etc/init.d/iptables-persistent reload
            * [ ] 16.04 
                sudo netfilter-persistent save
                sudo netfilter-persistent reload
        * [ ] Autodrop ssh logins to 8 times per minute
            - [ ] sudo iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
            - [ ] sudo iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 --rttl --name SSH -j DOP
        * [ ] Log denied calls (dont forget to drop/and reinstate the last rule - see above)
            - [ ] sudo iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "[denied]" --log-level 7
        * [ ] Rediret log file from kern.log to denied.log
            - [ ] vim /etc/rsyslog.d/my_iptables.conf
                * [ ] add line:
                    - [ ] :msg,contains,"[denied]" /var/log/iptables.log
                    - [ ] sudo touch /var/log/iptables.log
        - [ ] save rules
        * [ ] todo - block china ddos
            * [ ] ref: https://mattwilcox.net/web-development/unexpected-ddos-blocking-china-with-ipset-and-iptables
        * [ ] fail2ban
            * [ ] sudo apt-get update
            * [ ] sudo apt-get install fail2ban
            * [ ] awk '{ printf "# "; print; }' /etc/fail2ban/jail.conf | sudo tee /etc/fail2ban/jail.local


== daily monitor == 
* [ ] Check logs for suspicious activity
    - [ ] tail -f /var/www/dev/pak11273/logs/*.log | egrep "login|444"
        * if you site is under attack you will seee something like this:
        * 2013/08/23 04:17:03 [error] 256554#0: *99927 limiting requests, excess: 1.852 by zone "one", client: 1.2.3.4, server: example.com, request: "GET /wp-login.php HTTP/1.0", host: "exmaple.com"
* [ ] use this to simulate an attack:
        - ab -n 100 -c 10 107.170.216.170/index.js
        * later: this makes requests, but doesn't produce errors
* [ ] see what ips are snooping ssh
    - [ ] tail -f /var/log/fail2ban.log
        * [ ] look for lines that ban ip
* [ ] see jailed ips
    - [ ] fail2ban-client status nginx-req-limit 
* [ ] wapiti scan
    - [ ] wapiti http://example.org -n 10 -b folder
    - [ ] use bash to scp file to local and read it
    - [ ] check this output every month to make sure letsencrypt is renewing: /var/log/le-renew.log
* [ ] Check tcp traffic
    - [ ] tcptrack -i eth0
* [ ] Check banned ips at /etc/fail2ban/ip.blacklist
    * [ ] Ban an IP
        - [ ] sudo /sbin/iptables -A INPUT -s <ipp addr> -j DROP
    * [ ] View a banned IP
        - [ ] sudo iptables -L INPUT -v -n | grep "<ip addr>"
    * [ ] Unban an IP
        - [ ] sudo iptables -D INPUT -s <ip addr> -j DROP
        - [ ] view /var/log/iptables.log 
    * [ ] Check iptables
        - [ ] sudo iptables -L
 
= PreSetup = 

* [ ] Initial security
    * [ ] Install tcptrack
        - [ ] apt-get install tcptrack
        - [ ] tmux leader key > resize-p -R 10
        - [ ] tcptrack -i eth0
    * [ ] Iptables
        * [ ] Iptables basic commands
            * [ ] iptables -L | grep policy
                * [ ] show current default rules 
            * [ ] drop all connections from a speicific ip
                * [ ] iptables -A INPUT -s 1.1.1.1 -j DROP
            * [ ] drop all connenctions from a range of ip
                * [ ] iptables -A INPUT -s 1.1.1.1/24 -j DROP
            * [ ] block ssh from a specific ip
                * [ ] iptables -A INPUT -p tcp --dport ssh 1.1.1.1 -j DROP
                * [ ] you carn replace ssh with any protocol or port number
            * [ ] saving iptables rules ubuntu
                * [ ] /sbin/iptables-save
            * [ ] List current iptables rules
                * [ ] iptables -L
            * [ ] Clear iptables rules
                * [ ] iptables -F
* [ ] Memory utility
    * [ ] sudo apt-get install htop
     
 
 
 

