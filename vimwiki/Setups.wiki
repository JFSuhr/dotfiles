* [o] == Follow these in order to setup a basic MEAN Stack on Digital Ocean ==

    * [X] = [[#Dotfiles setup]] =

    * [X] = [[#VIM setup]] =
    
    * [X] = [[#Ubuntu Server Setup ]]=

    * [X] = [[#NGinx Setup ]]=

    * [X] = [[#Node Setup ]]=

    * [X] = [[#PM2]]=

    * [X] = [[#Multiple Apps ]]=
 
    * [ ] = [[#tmux setup]] =
 
    * [ ] = [[#mongodb setup]] =
    
    * [ ] = [[#server security]] =
    
    * [ ] = [[#daily monitor]] =
    
    * [ ] = [[#robomongo]] =  
 
    * [ ] = [[#node debugger]] =


= [[#basic app framework]] =







== Ubuntu Server Setup ==
* [X] Setup
    - [X] Create a droplet/iso
    * [X] SSH
        - [X] create ssh keys if you dont have:
        * [X] type this in shell:
            - [X] ssh-keygen -t rsa -C "pak11273@gmail.com"
        - [X] add linux distro
        * [X] create key in putty
            - [X] upload public key to server
    * [X] Add superuser
        - [X] adduser pak11273
        - [X] usermod -aG sudo pak11273
        - [X] copy public key
        - [X] login as root and su pak11273
        - [X] mkdir ~/.ssh
        - [X] chmod 700 ~/.ssh
        - [X] vim ~/.ssh/authorized_keys
        - [X] paste public key
        - [X] exit
    * Disable password authentication (optional)
        * UPDATE: Do not do this step.  It will prevent Putty from using passphrase for your ssh key.  Reference only:
        * allows only ssh keys access to server
        * vim /etc/ssh/sshd_config
        * PasswordAuthentication no
        * systemctl reload sshd
    * [X] Basic firewall
        - [X] ufw allow OpenSSH
        - [X] ufw enable
        - [X] ufw status

== NGinx Setup ==
* [O] completed 
    - [X] apt-get update
    - [X] apt-get install nginx
    * [X] I. adjust firewall
        - [X] ufw allow 'Nginx Full'
        - [X] ufw status
        - [X] systemctl status nginx
        - [X] apt-get install curl
    * [ ] add php and js to file extensions: later
        - [ ] cd /etc/nginx
        - [ ] vim nginx.conf
        - [ ] Add this line:

== Node Setup ==
* [X] completed 
    - [X] apt-get update
    - [X] apt-get install nodejs
    - [X] apt-get install npm
    - [X] sudo apt-get install build-essential libssl-dev
    - [X] curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh -o install_nvm.sh
    - [X] bash install_nvm.sh 
    - [X] source ~/.profile
    * [X] get latest node version
        - [X] nvm install 6.7.0 ( or latest version ) 
        - [X] nvm use 6.7.0
        * useful commands:
            * nvm ls //see what version installed
            * node -v  //see what version you are using
            * nvm alias default 6.0.0 //use this version as default

== PM2 ==
* [X] completed
    - [X] npm install pm2 -g
    - [X] pm2 startup ubuntu
    - [X] copy/paste the line it provides  
        * this sets pm2 to start on boot
    * other pm2 commands:
        * pm2 start <server name>
        * pm2 stop,restart,list,info,monit

== Multiple Apps ==
* [ ] completed
	- [ ] /etc/nginx/sites-available:
        - [ ] Create a file of the appname. 
        - [ ] c/p:
            - change APP_PRIVATE_IP_ADDRESS to 127.0.0.1 or localhost and server_name
            
{{{	
	server {
	
	listen 80;

	server_name example.com;

	location /<appname> {
		proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080;
        	proxy_http_version 1.1;
        	proxy_set_header Upgrade $http_upgrade;
        	proxy_set_header Connection 'upgrade';
        	proxy_set_header Host $host;
        	proxy_cache_bypass $http_upgrade;
    }
}
}}}

* [X] basic structure of an app
      - [X] c/p inside the server filename:
          - [X] This file is usually inside /var/www/dev/<appname> 
          - where private_ip_addr use 127.0.0.1 
    {{{
	var http = require('http');
	http.createServer(function (req, res) {
  		res.writeHead(200, {'Content-Type': 'text/plain'});
  		res.end('Hello World\n');
}).listen(8080, 'APP_PRIVATE_IP_ADDRESS');
	console.log('Server running jat http://APP_PRIVATE_IP_ADDRESS:8080/');
    }}}
    
= VIM setup =
* [X] completed
    * [X] c/p in command line:
          sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
          libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
          libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
          python3-dev ruby-dev lua5.1 lua5.1-dev git
    
    - [X] remove vim: 
          sudo apt-get remove vim vim-runtime gvim
    * [X] cd ~
    * [X] git clone https://github.com/vim/vim.git
    * [X] cd vim
    * [X] c/p in command line:
        - [X] 
./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu --enable-python3interp --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr
    - [X] make VIMRUNTIMEDIR=/usr/share/vim/vim80
    - [X] sudo apt-get install checkinstall
    - [X] cd vim
    - [X] sudo checkinstall

= Dotfiles setup =
* [X] completed part 1
      - [X] cd ~
      - [X] mkdir dotfiles
      - [X] vim makesymlinks.sh
      - [X] c/p:
{{{
#!/bin/bash
############################
# http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

########## Variables

files="bashrc vimrc vim"    # list of files/folders to symlink in homedir

##########

# create dotfiles_old in homedir
echo "Creating $olddir for backup of any existing dotfiles in ~"
mkdir -p $olddir
echo "...done"

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir
echo "...done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks 
for file in $files; do
    echo "Moving any existing dotfiles from ~ to $olddir"
    mv ~/.$file ~/dotfiles_old/
    echo "Creating symlink to $file in home directory."
    ln -s $dir/$file ~/.$file
done
}}}

    * [o] completed part 2
          - [X] create github repo
          - [X] upload to repo:
          - any changes you make to dotfiles, add them to your makesymlinks.sh file
          - [ ] Add plugins:
              - [ ] Plugin 'vundle' " vim manager
              - [ ] Plugin 'vimwiki/vimwiki' " store your vim note here
              - [ ] Plugin 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
              - [ ] Plugin 'vim-airline/vim-airline-themes'
              - [ ] Plugin 'christoomey/vim-tmux-navigator' " tmux + vim seamless navigation

              - [ ] Plugin 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
              - [ ] Plugin 'scrooloose/syntastic'
              - [ ] " Plugin 'ervandew/supertab' " use <tab> insert completion
              - [ ] Plugin 'tpope/vim-surround' " surround code with parens, brackets, quotes, etc
              - [ ] Plugin 'tpope/vim-fugitive' " git wrapper for vim
              - [ ] Plugin 'tpope/vim-commentary' " comments out code
              - [ ] " Plugin 'tobyS/vmustache' | Plug 'tobyS/pdv' " php documente
              - [ ] " Plugin 'SirVer/ultisnips' " create snippets ( needs python support )
              - [ ] Plugin 'ctrlpvim/ctrlp.vim' " fuzzy file finder
              - [ ] Plugin 'MarcWeber/vim-addon-mw-utils' " dependency for vim snips
              - [ ] Plugin 'tomtom/tlib_vim' " dependency for vim snips
              - [ ] Plugin 'garbas/vim-snipmate' " vim snips 
              - [ ] Plugin 'honza/vim-snippets' " vim snips 
              - [ ] Plugin 'flazz/vim-colorschemes' " vim colorschemes 

= tmux setup = 

* [ ] completed
    - [ ] start a tmux session
    - [ ] git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    - [ ] tmux source ~/.tmux.conf
    - [ ] prefix + I //installs plugins
 
= mongodb setup = 
* [ ] completed
    * [ ] installation
        - [ ] sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
        - [ ] create a sources list for 16.04
        - [ ] echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse
        - [ ] sudo apt-get update
        - [ ] sudo apt-get install -y mongodb-org
        * [ ] prevent mongodb upgrades run all of the following commands:
            - [ ] echo "mongodb-org hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-server hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-shell hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
            - [ ] echo "mongodb-org-tools hold" | sudo dpkg --set-selections
    * [ ] Create a daemon for mongodb
        - [ ] ensure this file is present /lib/systemd/system/mongod.service
    * [ ] Start mongodb
        - [ ] sudo service mongod start 
        - [ ] systemctl status mongod
         
    * [ ] customize mongo shell
        * [ ] custom prompt
        * [ ] start mongo shell
            - [ ] mongo
            - [ ] var prompt = function() { return db+"@"+host+" Uptime:"+db.serverStatus().uptime+" Documents:"+db.stats().objects+" > " ;}
            - [ ] 

 = node debugger =
 
 * [ ] completed
     - [ ] npm install -g vimdebug
     - [ ] put debugger inside listener:
            app.listen(8080, function() {
                debugger;
                });
     - [ ] start script 
            node --debug-brk index.js
     - [ ] start agent
            node-vim-inspector 
     - [ ] inside vim type :nbs 
      **** see node-vim-debugger for commands
 
 
 
 
 
 
 
 
 = basic app framework =
 
* [ ] completed
    - [ ] cd inside of your project root directory
    - [ ] touch index.js
          var express = require('express');
          var bodyParser = require('body-parser');
          var cors = require('cors');
          var mongojs = require('mongojs');
          
          var app = express();
          
          //1. listen for http requests 
          app.listen(<port>, function() {
            console.log('listening on port 9002');
          });
          
          = //2. always parse http body as json, it assigns result to req.body =
          //ALL http methods will be parsed as json
          app.use(bodyParser.json())
          
          //3. abstract away methods into an object
         
          var controller = {
            "index": function(req,res,next) {
                res.send('get page');
                });
                
              app.get('/endpoint', books_controller.index);
          
          //4. basic http post method 
          app.post('/endpoint', function(req,res,next) {
            res.send(req.body);
          });
          
          //5. basic http delete method 
          // incoming url domain.com/endpoint/0
          app.delete('/endpoint', function(req,res,next) {
            array.splice(req,params.id, 1);
            res.send(array:w
            );
          });
          
          
    - [ ] git init
    - [ ] npm init
    - [ ] npm install express --save
    - [ ] vim .gitignore  
        - [ ] node_modules
    - [ ] npm install body-parser --save 
    - [ ] cd root
    - [ ] bower install 
    - [ ] pm2 start index.js -n <app name>
    
= robomongo = 
* [ ] completed
    - [ ] vim /etc/mongod.conf 
    - [ ] comment out bindIp: 127.0.0.1
    - [ ] service mongod restart

= server security =
* [.] completed
    * [ ] to be reviewed
        * [ ] UFW
            * [ ] allow x11 port forwarding
                - [ ] sudo ufw allow 6000:6063/tcp
                - [ ] sudo ufw allow 6000:6063/udp
    * [ ] Useful audit command:
        * [ ] sudo netstat -plunt
    * [ ] Nginx Setup
        - [ ] vim /etc/nginx/nginx.conf
            * [ ] add this to file:
            limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
            limit_req_status 444;
            map $remote_addr $rt_filtered_ip {
               default $binary_remote_addr;
               # list other ips below
               # ie. 1.2.3.4 ""; //make sure you use "" in 2nd column for every ip
            }
        * [ ] prevent info disclosure
            - [ ] vim /etc/nginx/nginx.conf
                - [ ] uncomment server_tokens off;
                - [ ] sudo service nginx reload
            * [ ] add this to server block of each server:
                * [ ] vim /etc/nginx/sites-available/<server>
                    - [ ] error_page 401 403 404 /404.html;
                    - [ ] sudo service nginx reload
        * [ ] SSL with Let's Encrypt 
            * [ ] reference: https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
            - [ ] ensure you have a domain name and A records to www and @
            - [ ] sudo apt-get update
            - [ ] sudo apt-get install letsencrypt
            - [ ] vim /etc/nginx/sites-available/<server>
                    location ~/.well-known {
                        root /var/www;
                        allow all;
                    }
            - [ ] search for nginx errors:
                    sudo nginx -t 
            - [ ] sudo systemctl restart nginx 
            - [ ] use the following to encrypt a site:
                - sudo letsencrypt certonly -a webroot --webroot-path=/var/www -d example.com -d www.example.com
                * letsencrypt notes:
                    * cert and chains saved at /etc/letsencrypt/live/<domain.com>/fullchain.pem.
                    * expires at a later date, to renew simply run letsencrypt again
                    * account data saved at /etc/letsencrypt which contains certs and private keys, make regular backups of this folder.
            * [ ] generate a strong Diffie-Hellman group:
                - [ ] sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
                    * it will reside in /etc/ssl/certs/dhparam.pem 
            * [ ] Now use your ssl cert
                - [ ] vim /etc/nginx/snippets/ssl-pak11273.com.conf
                - [ ] add these lines, but change "example" to your domain: 
                    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
            * [ ] vim /etc/nginx/snippets/ssl-params.conf 
            * [ ] add the following:
               # from https://cipherli.st/
               # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
               ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
               ssl_prefer_server_ciphers on;
               ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
               ssl_ecdh_curve secp384r1;
               ssl_session_cache shared:SSL:10m;
               ssl_session_tickets off;
               ssl_stapling on;
               ssl_stapling_verify on;
               resolver 8.8.8.8 8.8.4.4 valid=300s;
               resolver_timeout 5s;
               # Disable preloading HSTS for now.  You can use the commented out header line that includes
               # the "preload" directive if you understand the implications.
               #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
               add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
               add_header X-Frame-Options DENY;
               add_header X-Content-Type-Options nosniff;

               ssl_dhparam /etc/ssl/certs/dhparam.pem;

                * to learn more about what this does, read here:
                     https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
            * [ ] Make a backup of your server file:
                - [ ] sudo cp /etc/nginx/sites-available/<server file> 
            * [ ] Modify unencrypted http reqa to redirect to encrypted https 
            * [ ] Add this line to /etc/nginx/sites-available/<server file>:
                server_name example.com www.example.com;
                return 301 https://$server_name$request_uri;
               
               
            * [ ] Add another server block to the above file (replace example.com with your domain): 
                  server {
                    # SSL Config
                    
                    listen 443 ssl http2 default_server;
                    listen [::]:443 ssl http2 default_server;
                    include snippets/ssl-example.com.conf;
                    include snippets/ssl-params.conf;
                  }
                  
            * [ ] Seee this website if you need to include http too:
                * [ ] https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
            * [ ] Adjust ufw now 
                - [ ] Ensure ufw status says "Nginx Full"
                * [ ] test nginx for errors
                    - [ ] sudo nginx -t
                - [ ] sudo systemctl restart nginx
                * [ ] ssl test goto:
                    - [ ]https://www.ssllabs.com/ssltest/analyze.html?d=example.com
                            
            * [ ] Restrict IP
                - [ ] in your server file in the server block, add this line and replace with your ip.  (great for wp sites for /wp-admin directory.  use for admin folders etc:
                    location /<folders>/ {
                        allow <ipaddress>/24;
                        allow <another ipaddress>/24;
                        deny all;
                    }
                - [ ] sudo service nginx reload 
            * [ ] wapiti audit software 
                - [ ] sudo apt-get install wapiti
            * [ ] Create cronjob for letsencrypt
                - [ ] sudo crontab -e
                    - [ ] add these lines:
                        30 2 * * 1 /usr/bin/letsencrypt renew >> /var/log/le-renew.log
                        35 2 * * 1 /bin/systemctl reload nginx
                     
                                      
        * [.] fail2ban
            - [X] apt-get install fail2ban
            - [ ] vim /etc/fail2ban/filter.d/nginx-req-limit.conf
                * [ ] add this text:
           # Fail2Ban configuration file
           #
           # supports: ngx_http_limit_req_module module
           
           [Definition]
           
           failregex = limiting requests, excess:.* by zone.*client: <HOST>
           
           # Option: ignoreregex
           # Notes.: regex to ignore. If this regex matches, the line is ignored.
           # Values: TEXT
           #
           ignoreregex =
            * [ ] jail config 
                - [ ] cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
                - [ ] add following:
           [nginx-req-limit]
           
           enabled = true
           filter = nginx-req-limit
           action: iptables-multiport[name=ReqLimit, port="http,https", protocol=tcp]
           logpath = /var/log/nginx/*error.log
       findtime = 600
       bantime = 7200
       maxretry = 10
            - [ ] service fail2ban restart 
       
       

       
   
== daily monitor == 
* [ ] Check logs for suspicious activity
    - [ ] tail -f /var/www/dev/pak11273/logs/*.log | egrep "login|444"
        * if you site is under attack you will seee something like this:
        * 2013/08/23 04:17:03 [error] 256554#0: *99927 limiting requests, excess: 1.852 by zone "one", client: 1.2.3.4, server: example.com, request: "GET /wp-login.php HTTP/1.0", host: "exmaple.com"
* [ ] use this to simulate an attack:
        - ab -n 100 -c 10 107.170.216.170/index.js
        * later: this makes requests, but doesn't produce errors
* [ ] see what ips are snooping ssh
    - [ ] tail -f /var/log/fail2ban.log
        * [ ] look for lines that ban ip
* [ ] see jailed ips
    - [ ] fail2ban-client status nginx-req-limit 
* [ ] wapiti scan
    - [ ] wapiti http://example.org -n 10 -b folder
    - [ ] use bash to scp file to local and read it
    - [ ] check this output every month to make sure letsencrypt is renewing: /var/log/le-renew.log
 
 
 
 
 
 

